---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 02/09/2019 15:02
---

local hairListM = {
    { ID = 0, name = "Chauve" },
    { ID = 2, name = "Longue queue", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 3, name = "Chignon", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 5, name = "Queue courte", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 6, name = "Biker", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 7, name = "Pecno", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 8, name = "Macbeat" },
    { ID = 9, name = "Trunks", collection = "multiplayer_overlays", overlay = "NG_M_Hair_012" },
    { ID = 10, name = "Coiffure 10", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 11, name = "Coiffure 11", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 12, name = "Coiffure 12", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 37, name = "Court" },
    { ID = 38, name = "Faux Hawk", collection = "multiplayer_overlays", overlay = "NG_M_Hair_002" },
    { ID = 39, name = "Hipster", collection = "multiplayer_overlays", overlay = "NG_M_Hair_003" },
    { ID = 40, name = "Side Parting", collection = "multiplayer_overlays", overlay = "NG_M_Hair_004" },
    { ID = 41, name = "Shorter Cut", collection = "multiplayer_overlays", overlay = "NG_M_Hair_005" },
    { ID = 42, name = "Biker", collection = "multiplayer_overlays", overlay = "NG_M_Hair_006" },
    { ID = 43, name = "Ponytail", collection = "multiplayer_overlays", overlay = "NG_M_Hair_007" },
    { ID = 44, name = "Cornrows", collection = "multiplayer_overlays", overlay = "NG_M_Hair_008" },
    { ID = 45, name = "Slicked", collection = "multiplayer_overlays", overlay = "NG_M_Hair_009" },
    { ID = 46, name = "Short Brushed", collection = "multiplayer_overlays", overlay = "NG_M_Hair_013" },
    { ID = 47, name = "Spikey", collection = "multiplayer_overlays", overlay = "NG_M_Hair_002" },
    { ID = 48, name = "Caesar", collection = "multiplayer_overlays", overlay = "NG_M_Hair_011" },
    { ID = 49, name = "Chopped", collection = "multiplayer_overlays", overlay = "NG_M_Hair_012" },
    { ID = 50, name = "Dreads", collection = "multiplayer_overlays", overlay = "NG_M_Hair_014" },
    { ID = 51, name = "Long Hair", collection = "multiplayer_overlays", overlay = "NG_M_Hair_015" },
    { ID = 52, name = "Shaggy Curls", collection = "multiplayer_overlays", overlay = "NGBea_M_Hair_000" },
    { ID = 53, name = "Surfer Dude", collection = "multiplayer_overlays", overlay = "NGBea_M_Hair_001" },
    { ID = 54, name = "Short Side Part", collection = "multiplayer_overlays", overlay = "NGBus_M_Hair_000" },
    { ID = 55, name = "High Slicked Sides", collection = "multiplayer_overlays", overlay = "NGBus_M_Hair_001" },
    { ID = 56, name = "Long Slicked", collection = "multiplayer_overlays", overlay = "NGHip_M_Hair_000" },
    { ID = 57, name = "Hipster Youth", collection = "multiplayer_overlays", overlay = "NGHip_M_Hair_001" },
    { ID = 58, name = "Mullet", collection = "multiplayer_overlays", overlay = "NGInd_M_Hair_000" },
    { ID = 59, name = "Classic Cornrows", collection = "mplowrider_overlays", overlay = "LR_M_Hair_000" },
    { ID = 60, name = "Palm Cornrows", collection = "mplowrider_overlays", overlay = "LR_M_Hair_001" },
    { ID = 61, name = "Lightning Cornrows", collection = "mplowrider_overlays", overlay = "LR_M_Hair_002" },
    { ID = 62, name = "Whipped Cornrows", collection = "mplowrider_overlays", overlay = "LR_M_Hair_003" },
    { ID = 63, name = "Zig Zag Cornrows", collection = "mplowrider2_overlays", overlay = "LR_M_Hair_004" },
    { ID = 64, name = "Snail Cornrows", collection = "mplowrider2_overlays", overlay = "LR_M_Hair_005" },
    { ID = 65, name = "Hightop", collection = "mplowrider2_overlays", overlay = "LR_M_Hair_006" },
    { ID = 66, name = "Loose Swept Back", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_000_M" },
    { ID = 67, name = "Undercut Swept Back", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_001_M" },
    { ID = 68, name = "Undercut Swept Side", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_002_M" },
    { ID = 69, name = "Spiked Mohawk", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_003_M" },
    { ID = 70, name = "Mod", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_004_M" },
    { ID = 71, name = "Layered Mod", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_005_M" },
    { ID = 72, name = "Flattop", collection = "mpgunrunning_overlays", overlay = "MP_Gunrunning_Hair_M_000_M" },
    { ID = 73, name = "Military Buzzcut", collection = "mpgunrunning_overlays", overlay = "MP_Gunrunning_Hair_M_001_M" },
}

local hairListF = {
    { ID = 0, name = "Crâne rasé", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 1, name = "Long", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 2, name = "Coiffure 03", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 3, name = "Court", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 4, name = "Coiffure 04", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 5, name = "Long épaule", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 6, name = "Coiffure 06", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 7, name = "Dread", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 8, name = "Coiffure 08" },
    { ID = 9, name = "Coiffure 09", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 10, name = "Coiffure 10", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 11, name = "Coiffure 11", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 12, name = "Coiffure 12", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 13, name = "Coiffure 13", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 14, name = "Coiffure 14", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 15, name = "Coiffure 15", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 16, name = "Coiffure 16", collection = "mpbeach_overlays", overlay = "FM_Hair_Fuzz" },
    { ID = 39, name = "Short", collection = "multiplayer_overlays", overlay = "NG_F_Hair_001" },
    { ID = 40, name = "Layered Bob", collection = "multiplayer_overlays", overlay = "NG_F_Hair_002" },
    { ID = 41, name = "Pigtails", collection = "multiplayer_overlays", overlay = "NG_F_Hair_003" },
    { ID = 42, name = "Ponytail", collection = "multiplayer_overlays", overlay = "NG_F_Hair_004" },
    { ID = 43, name = "Braided Mohawk", collection = "multiplayer_overlays", overlay = "NG_F_Hair_005" },
    { ID = 44, name = "Braids", collection = "multiplayer_overlays", overlay = "NG_F_Hair_006" },
    { ID = 45, name = "Bob", collection = "multiplayer_overlays", overlay = "NG_F_Hair_007" },
    { ID = 46, name = "Faux Hawk", collection = "multiplayer_overlays", overlay = "NG_F_Hair_008" },
    { ID = 47, name = "French Twist", collection = "multiplayer_overlays", overlay = "NG_F_Hair_009" },
    { ID = 48, name = "Long Bob", collection = "multiplayer_overlays", overlay = "NG_F_Hair_010" },
    { ID = 49, name = "Loose Tied", collection = "multiplayer_overlays", overlay = "NG_F_Hair_011" },
    { ID = 50, name = "Pixie", collection = "multiplayer_overlays", overlay = "NG_F_Hair_012" },
    { ID = 51, name = "Shaved Bangs", collection = "multiplayer_overlays", overlay = "NG_F_Hair_013" },
    { ID = 52, name = "Top Knot", collection = "multiplayer_overlays", overlay = "NG_M_Hair_014" },
    { ID = 53, name = "Wavy Bob", collection = "multiplayer_overlays", overlay = "NG_M_Hair_015" },
    { ID = 54, name = "Messy Bun", collection = "multiplayer_overlays", overlay = "NGBea_F_Hair_000" },
    { ID = 55, name = "Pin Up Girl", collection = "multiplayer_overlays", overlay = "NGBea_F_Hair_001" },
    { ID = 56, name = "Tight Bun", collection = "multiplayer_overlays", overlay = "NG_F_Hair_007" },
    { ID = 57, name = "Twisted Bob", collection = "multiplayer_overlays", overlay = "NGBus_F_Hair_000" },
    { ID = 58, name = "Flapper Bob", collection = "multiplayer_overlays", overlay = "NGBus_F_Hair_001" },
    { ID = 59, name = "Big Bangs", collection = "multiplayer_overlays", overlay = "NGBea_F_Hair_001" },
    { ID = 60, name = "Braided Top Knot", collection = "multiplayer_overlays", overlay = "NGHip_F_Hair_000" },
    { ID = 61, name = "Mullet", collection = "multiplayer_overlays", overlay = "NGInd_F_Hair_000" },
    { ID = 62, name = "Pinched Cornrows", collection = "mplowrider_overlays", overlay = "LR_F_Hair_000" },
    { ID = 63, name = "Leaf Cornrows", collection = "mplowrider_overlays", overlay = "LR_F_Hair_001" },
    { ID = 64, name = "Zig Zag Cornrows", collection = "mplowrider_overlays", overlay = "LR_F_Hair_002" },
    { ID = 65, name = "Pigtail Bangs", collection = "mplowrider2_overlays", overlay = "LR_F_Hair_003" },
    { ID = 66, name = "Wave Braids", collection = "mplowrider2_overlays", overlay = "LR_F_Hair_003" },
    { ID = 67, name = "Coil Braids", collection = "mplowrider2_overlays", overlay = "LR_F_Hair_004" },
    { ID = 68, name = "Rolled Quiff", collection = "mplowrider2_overlays", overlay = "LR_F_Hair_006" },
    { ID = 69, name = "Loose Swept Back", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_000_F" },
    { ID = 70, name = "Undercut Swept Back", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_001_F" },
    { ID = 71, name = "Undercut Swept Side", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_002_F" },
    { ID = 72, name = "Spiked Mohawk", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_003_F" },
    { ID = 73, name = "Bandana and Braid", collection = "multiplayer_overlays", overlay = "NG_F_Hair_003" },
    { ID = 74, name = "Layered Mod", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_006_F" },
    { ID = 75, name = "Skinbyrd", collection = "mpbiker_overlays", overlay = "MP_Biker_Hair_004_F" },
    { ID = 76, name = "Neat Bun", collection = "mpgunrunning_overlays", overlay = "MP_Gunrunning_Hair_F_000_F" },
    { ID = 77, name = "Short Bob", collection = "mpgunrunning_overlays", overlay = "MP_Gunrunning_Hair_F_001_F" }
}

local rideList = { "-", "Rides yeux", "Rides 1", "Rides 2", "Rides 3", "Rides 4", "Rides 5", "Rides 6", "Rides 7", "Rides 8", "Rides 9", "Rides 10", "Rides EX 1", "Rides EX 2", "Cernes" }
local tachList = { "-", "Peu de tâches", "Tâches peu visibles", "Tâches baladées", "Tâches éparpillées", "Tâches sauvages", "Tâches centrées", "Tâches joues", "Tâches visage", "Infection visage", "Infection joues", "Rougeur", "Rougeur infectée", "Rougeurs front", "Acnée", "Acnée sévère", "Acnée baladée", "Acnée épaisse", "Acnée front", "Acnée totale" }
local eyesList = { "Vert", "Emmeraude", "Bleu", "Bleu ciel", "Marron clair", "Marron", "Noisette", "Gris sombre", "Gris propre", "Rose", "Jaune", "Violet", "Blackout", "Ombre grise", "Soleil tequila", "Atomic", "Faux", "Cola", "Ranger", "Ying-yang", "Bull", "Lezard", "Dragon", "Extra-terrestre", "Chèvre", "Smiley", "Possédé", "Démon", "Infecté", "Alien", "Mort", "Zombie" }

local BarbeName = {}
for i = 1, 29, 1 do
    BarbeName[i] = GetLabelText("CC_BEARD_" .. i - 1)
end

local SKClist = { "-" }
for i = 0, 11, 1 do
    table.insert(SKClist, GetLabelText("CC_SKINCOM_" .. i))
end

local MoleList = { "-" }

for i = 0, 18, 1 do
    table.insert(MoleList, GetLabelText("CC_MOLEFRECK_" .. i))
end

local ComplexList = { "-" }
for i = 1, 11, 1 do
    table.insert(ComplexList, GetLabelText("CC_MOLEFRECK_" .. i))
end

local MaquillageList = { "-" }
for i = 1, 71, 1 do
    table.insert(MaquillageList, GetLabelText("CC_MKUP_" .. i))
end

local LipsList = { "-" }
for i = 1, 10, 1 do
    table.insert(LipsList, GetLabelText("CC_LIPSTICK_" .. i))
end

local colorsPanel = {
    haircut = {
        [1] = 1,
        [2] = 1,
    },
    barber = {
        [1] = 1,
        [2] = 1,
    },
    lipstick = {
        [1] = 1,
        [2] = 1,
    },
    makeup = {
        [1] = 1,
        [2] = 1,
    }
}

local self = {
    FACE_HAIR = false,
    FACE_BEARD = false,
    FACE_SKINISSUES = false,
    FACE_OLDNESS = false,
    FACE_TINT = false,
}


-- TODO Implemented poile au dos ect..
function CreatorMenuAppearance(indexCharacter, createPlayer)
    local HairCutStyles = {}
    if (createPlayer.Model) == "mp_f_freemode_01" then
        for i = 1, #hairListF, 1 do
            table.insert(HairCutStyles, hairListF[i].name)
        end
    else
        for i = 1, #hairListM, 1 do
            table.insert(HairCutStyles, hairListM[i].name)
        end
    end
    RageUI.DrawContent({ header = true, instructionalButton = true }, function()
        RageUI.List(GetLabelText("FACE_HAIR"), HairCutStyles, indexCharacter[createPlayer.Model].Face.hair.style+1, GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.hair.style ~= Index-1 then
                    createPlayer[createPlayer.Model].Face.hair.style = Index  - 1
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.hair.style = Index -1
                end
                self.FACE_HAIR = true
            else
                self.FACE_HAIR = false
            end
        end)
        if (GetEntityModel(GetPlayerPed(-1)) == GetHashKey('mp_m_freemode_01')) then
            RageUI.List("Barbe", BarbeName, indexCharacter[createPlayer.Model].Face.facial.hair.beard.style+1, GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
                if Active then
                    if createPlayer[createPlayer.Model].Face.facial.hair.beard.style ~= Index-1 then
                        createPlayer[createPlayer.Model].Face.facial.hair.beard.style = Index  - 1 
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.facial.hair.beard.style = Index -1
                    end
                    self.FACE_BEARD = true
                else
                    self.FACE_BEARD = false
                end
            end)
        end
        RageUI.List(GetLabelText("FACE_F_SKINB"), tachList, indexCharacter[createPlayer.Model].Face.blemishes.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                print(Index)
                if createPlayer[createPlayer.Model].Face.blemishes.style ~= Index -1 then
                    
                    createPlayer[createPlayer.Model].Face.blemishes.style = Index  -1  
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.blemishes.style = Index -1 
                end
                self.FACE_TACH = true
            else
                self.FACE_TACH = false
            end
        end)
        RageUI.List(GetLabelText("FACE_F_SKINA"), rideList, indexCharacter[createPlayer.Model].Face.ageing.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.ageing.style ~= Index -1  then
                    createPlayer[createPlayer.Model].Face.ageing.style = Index - 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.ageing.style = Index -1
                end
                self.FACE_AGE = true
            else
                self.FACE_AGE = false
            end
        end)
        RageUI.List(GetLabelText("FACE_F_SKC"), SKClist, indexCharacter[createPlayer.Model].Face.skinAspect.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.skinAspect.style ~= Index -1 then
                    createPlayer[createPlayer.Model].Face.skinAspect.style = Index - 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.skinAspect.style = Index -1
                end
                self.skin_Aspect = true
            else
                self.skin_Aspect = false
            end
        end)
        RageUI.List(GetLabelText("FACE_F_MOLE"), MoleList, indexCharacter[createPlayer.Model].Face.freckles.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.freckles.style ~= Index -1 then
                    createPlayer[createPlayer.Model].Face.freckles.style = Index  - 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.freckles.style = Index -1
                end
                self.freckles = true
            else
                self.freckles = false
            end
        end)
        RageUI.List(GetLabelText("FACE_F_SUND"), ComplexList, indexCharacter[createPlayer.Model].Face.complexion.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.complexion.style ~= Index -1 then
                    createPlayer[createPlayer.Model].Face.complexion.style = Index - 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.complexion.style = Index -1
                end
                self.complexion = true
            else
                self.complexion = false
            end
        end)
        RageUI.List(GetLabelText("FACE_APP_EYE"), eyesList, indexCharacter[createPlayer.Model].Face.eye.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.eye.style ~= Index -1 then
                    createPlayer[createPlayer.Model].Face.eye.style = Index  - 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.eye.style = Index -1
                end
            end
        end)
        RageUI.List(GetLabelText("FACE_F_EYEM"), MaquillageList, indexCharacter[createPlayer.Model].Face.makeup.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.makeup.style ~= Index-1  then
                    createPlayer[createPlayer.Model].Face.makeup.style = Index - 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.makeup.style = Index -1
                end
                self.makeup = true
            else
                self.makeup = false
            end
        end)
        RageUI.List(GetLabelText("FACE_F_LIPST"), LipsList, indexCharacter[createPlayer.Model].Face.lipstick.style+1 , GetLabelText("FACE_APP_H"), {}, true, function(Hovered, Active, Selected, Index)
            if Active then
                if createPlayer[createPlayer.Model].Face.lipstick.style ~= Index-1  then
                    createPlayer[createPlayer.Model].Face.lipstick.style = Index- 1 
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.lipstick.style = Index-1
                end
                self.lipstick = true
            else
                self.lipstick = false
            end
        end)
    end, function()
        --- Panel
        if self.FACE_HAIR then
            RageUI.ColourPanel("Couleur principale", RageUI.PanelColour.HairCut, colorsPanel.haircut[1], indexCharacter[createPlayer.Model].Face.hair.color[1] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.hair.color[1] ~= CurrentIndex then
                        indexCharacter[createPlayer.Model].Face.hair.color[1] = CurrentIndex 
                        colorsPanel.haircut[1] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.hair.color[1] = CurrentIndex 
                    end
                end
            end)
            RageUI.ColourPanel("Couleur secondaire", RageUI.PanelColour.HairCut, colorsPanel.haircut[2], indexCharacter[createPlayer.Model].Face.hair.color[2] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.hair.color[2] ~= CurrentIndex then
                        indexCharacter[createPlayer.Model].Face.hair.color[2] = CurrentIndex 
                        colorsPanel.haircut[2] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.hair.color[2] = CurrentIndex
                    end
                end
            end)
        end
        if self.lipstick then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.lipstick.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.lipstick.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.lipstick.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.lipstick.opacity = Percent
                    end
                end
            end)
            RageUI.ColourPanel("Couleur principale", RageUI.PanelColour.HairCut, colorsPanel.lipstick[1], indexCharacter[createPlayer.Model].Face.lipstick.color[1] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.lipstick.color[1] ~= CurrentIndex then
                        indexCharacter[createPlayer.Model].Face.lipstick.color[1] = CurrentIndex
                        colorsPanel.lipstick[1] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.lipstick.color[1] = CurrentIndex 
                    end
                end
            end)
            RageUI.ColourPanel("Couleur secondaire", RageUI.PanelColour.HairCut, colorsPanel.lipstick[2], indexCharacter[createPlayer.Model].Face.lipstick.color[2] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.lipstick.color[2] ~= CurrentIndex  then
                        indexCharacter[createPlayer.Model].Face.lipstick.color[2] = CurrentIndex 
                        colorsPanel.lipstick[2] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.lipstick.color[2] = CurrentIndex
                    end
                end
            end)
        end
        if self.makeup then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.makeup.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if createPlayer[createPlayer.Model].Face.makeup.opacity ~= Percent then
                    createPlayer[createPlayer.Model].Face.makeup.opacity = Percent
                    UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                    indexCharacter[createPlayer.Model].Face.makeup.opacity = Percent
                end
            end)
            RageUI.ColourPanel("Couleur principale", RageUI.PanelColour.HairCut, colorsPanel.makeup[1], indexCharacter[createPlayer.Model].Face.makeup.color[1] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.makeup.color[1] ~= CurrentIndex  then
                        indexCharacter[createPlayer.Model].Face.makeup.color[1] = CurrentIndex 
                        colorsPanel.makeup[1] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.makeup.color[1] = CurrentIndex 
                    end
                end
            end)
            RageUI.ColourPanel("Couleur secondaire", RageUI.PanelColour.HairCut, colorsPanel.makeup[2], indexCharacter[createPlayer.Model].Face.makeup.color[2] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.makeup.color[2] ~= CurrentIndex then
                        indexCharacter[createPlayer.Model].Face.makeup.color[2] = CurrentIndex 
                        colorsPanel.makeup[2] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.makeup.color[2] = CurrentIndex 
                    end
                end
            end)
        end
        if self.FACE_BEARD then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.facial.hair.beard.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.facial.hair.beard.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.facial.hair.beard.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.facial.hair.beard.opacity = Percent
                    end
                end
            end)
            RageUI.ColourPanel("Couleur principale", RageUI.PanelColour.HairCut, colorsPanel.barber[1], indexCharacter[createPlayer.Model].Face.facial.hair.beard.color[1] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.facial.hair.beard.color[1] ~= CurrentIndex  then
                        indexCharacter[createPlayer.Model].Face.facial.hair.beard.color[1] = CurrentIndex 
                        colorsPanel.barber[1] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.facial.hair.beard.color[1] = CurrentIndex 
                    end
                end
            end)
            RageUI.ColourPanel("Couleur secondaire", RageUI.PanelColour.HairCut, colorsPanel.barber[2], indexCharacter[createPlayer.Model].Face.facial.hair.beard.color[2] , function(Hovered, Active, MinimumIndex, CurrentIndex)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.facial.hair.beard.color[2] ~= CurrentIndex then
                        indexCharacter[createPlayer.Model].Face.facial.hair.beard.color[2] = CurrentIndex 
                        colorsPanel.barber[2] = MinimumIndex
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        createPlayer[createPlayer.Model].Face.facial.hair.beard.color[2] = CurrentIndex 
                    end
                end
            end)
        end
        if self.FACE_TACH then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.blemishes.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.blemishes.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.blemishes.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.blemishes.opacity = Percent
                    end
                end
            end)
        end
        if self.FACE_AGE then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.ageing.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.ageing.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.ageing.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.ageing.opacity = Percent
                    end
                end
            end)
        end
        if self.skin_Aspect then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.skinAspect.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.skinAspect.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.skinAspect.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.skinAspect.opacity = Percent
                    end
                end
            end)
        end
        if self.freckles then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.freckles.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.freckles.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.freckles.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.freckles.opacity = Percent
                    end
                end
            end)
        end
        if self.complexion then
            RageUI.PercentagePanel(indexCharacter[createPlayer.Model].Face.complexion.opacity, "Opacité", nil, nil, function(Hovered, Active, Percent)
                if (Active) then
                    if createPlayer[createPlayer.Model].Face.complexion.opacity ~= Percent then
                        createPlayer[createPlayer.Model].Face.complexion.opacity = Percent
                        UpdateEntityFace(GetPlayerPed(-1), createPlayer[createPlayer.Model].Face)
                        indexCharacter[createPlayer.Model].Face.complexion.opacity = Percent
                    end
                end
            end)
        end
    end)
end